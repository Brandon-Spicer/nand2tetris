// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=true, sel=address[3..5], a=dmux0, b=dmux1, c=dmux2, d=dmux3, e=dmux4, f=dmux5, g=dmux6, h=dmux7);
    And(a=dmux0, b=load, out=and0);
    RAM8(in=in, load=and0, address=address[0..2], out=ram0);
    And(a=dmux1, b=load, out=and1);
    RAM8(in=in, load=and1, address=address[0..2], out=ram1);
    And(a=dmux2, b=load, out=and2);
    RAM8(in=in, load=and2, address=address[0..2], out=ram2);
    And(a=dmux3, b=load, out=and3);
    RAM8(in=in, load=and3, address=address[0..2], out=ram3);
    And(a=dmux4, b=load, out=and4);
    RAM8(in=in, load=and4, address=address[0..2], out=ram4);
    And(a=dmux5, b=load, out=and5);
    RAM8(in=in, load=and5, address=address[0..2], out=ram5);
    And(a=dmux6, b=load, out=and6);
    RAM8(in=in, load=and6, address=address[0..2], out=ram6);
    And(a=dmux7, b=load, out=and7);
    RAM8(in=in, load=and7, address=address[0..2], out=ram7);
    Mux8Way16(a=ram0, b=ram1, c=ram2, d=ram3, e=ram4, f=ram5, g=ram6, h=ram7, sel=address[3..5], out=out);
}
